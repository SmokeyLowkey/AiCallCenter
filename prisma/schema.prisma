// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Professional profile fields
  jobTitle      String?
  department    String?
  phoneNumber   String?
  skills        String[]  @default([])
  profileImage  String?
  availability  Json?

  // Team relationships
  teamId        String?
  team          Team?     @relation("TeamMember", fields: [teamId], references: [id])
  ownedTeams    Team[]    @relation("TeamOwner")
  memberTeams   TeamMember[]

  accounts      Account[]
  sessions      Session[]
  VerificationToken VerificationToken[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

// Team-related models
model Team {
  id             String      @id @default(cuid())
  name           String
  description    String?
  industry       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Owner relationship
  ownerId        String
  owner          User        @relation("TeamOwner", fields: [ownerId], references: [id])
  
  // Members relationship
  members        User[]      @relation("TeamMember")
  teamMembers    TeamMember[]
  
  // Invite codes
  inviteCodes    InviteCode[]
}

model TeamMember {
  id             String      @id @default(cuid())
  userId         String
  teamId         String
  role           UserRole    @default(AGENT)
  joinedAt       DateTime    @default(now())
  
  // Relations
  user           User        @relation(fields: [userId], references: [id])
  team           Team        @relation(fields: [teamId], references: [id])
  
  // Ensure a user can only have one role per team
  @@unique([userId, teamId])
}

model InviteCode {
  id             String      @id @default(cuid())
  code           String      @unique
  teamId         String
  createdAt      DateTime    @default(now())
  expiresAt      DateTime
  usedCount      Int         @default(0)
  maxUses        Int         @default(10)
  
  // Relation
  team           Team        @relation(fields: [teamId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  AGENT
  MANAGER
}
